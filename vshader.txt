#version 330

//Zmienne jednorodne
uniform mat4 P;
uniform mat4 V;
uniform mat4 M;
uniform vec4 Przes;
uniform vec4 lp;
uniform vec4 lPp;


//Atrybuty

layout(location = 0) in vec3 vertex;
layout(location = 1) in vec3 normals;
layout(location = 2) in vec2 uvs;
layout(location = 3) in vec3 nTan;
layout(location = 4) in vec3 nBTan;

out vec2 texCoords;
out vec4 l; //Wektor do swiatla w przestrzeni oka
out vec4 v; //Wektor do obserwatora w przestrzeni oka
out vec4 lPoint;
out vec4 lPointPos;
out vec4 vertexInt;

out vec3 no;
out vec3 T;
out vec3 B;


 float d;
vec4 wiercholek;

float PI = 3.1415926;



void main(void) {


    //Obliczenie wektora do swiatla w przestrzeni oka
	l=normalize(V*(lp-M*vec4(vertex,1)));
	//Obliczenie wektora do obserwatora w przestrzeni oka
	v=normalize(vec4(0,0,0,1)-(V*M*vec4(vertex,1)));
    //Obliczenie wektora do światła punktowego w przestrzeni swiata
    lPoint = normalize(V*(lPp - M*vec4(vertex,1)));
    lPointPos = V*lPp;
   //liczenie macierzy przesuniecia
    mat4 Mov = mat4(1.0);
    Mov[3].x=Przes.x;
    Mov[3].z=Przes.z;

    //liczenie macierzy obrotu o 90 stopni, oœ Y

    mat4 Rot = mat4(1.0);
    if(int(Przes.w)==0){
        Rot[0].x=cos(90*Przes.y*PI/180);
        Rot[0].z=-sin(90*Przes.y*PI/180);
        Rot[2].x=sin(90*Przes.y*PI/180);
        Rot[2].z=cos(90*Przes.y*PI/180);

   }

   else{
        Rot[0].x=cos(90*(Przes.w-1.0)*PI/180);
        Rot[0].z=-sin(90*(Przes.w-1.0)*PI/180);
        Rot[2].x=sin(90*(Przes.w-1.0)*PI/180);
        Rot[2].z=cos(90*(Przes.w-1.0)*PI/180);

   }

    mat4 Mod=Mov*Rot*M;

    no = normalize(vec3(V*Mod* vec4(normals, 0.0)));
    T = normalize(vec3(V*Mod* vec4(nTan, 0.0)));
    B = normalize(vec3(V*Mod* vec4(nBTan, 0.0)));

    texCoords = uvs;
    vertexInt = V*Mod*vec4(vertex,1.0);
	gl_Position=P*V*Mod*vec4(vertex,1.0);

}


